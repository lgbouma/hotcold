import numpy as np
import matplotlib.pyplot as plt
from astropy import constants as const
from astropy import units as u
from aesthetic.plot import set_style

def compute_rv_range(phi: float,
                     delta_phi_deg: float,
                     torus_radius: u.Quantity = None) -> tuple:
    """Compute the min and max radial velocities for an arc on a torus.

    Given the central azimuthal angle phi of the emitting arc and its
    azimuthal extent in degrees, this function computes the minimum and
    maximum radial velocities for that arc in an edge-on circular orbit.
    The orbital period is fixed at 3.93 hours and the stellar radius is fixed
    at 0.42 R_sun. By default, the torus radius is set to 2.4 * R_star.
    The radial velocity for a point at azimuth theta is defined as
    v_r = - v_orb * sin(theta), with v_orb = 2π * torus_radius / period.

    Args:
        phi (float): Central azimuthal angle of the arc in radians.
        delta_phi_deg (float): Azimuthal extent of the arc in degrees.
        torus_radius (astropy.units.Quantity, optional): Radius of the torus.
            Defaults to 2.4 * (0.42 R_sun).

    Returns:
        tuple: (v_min, v_max) in km/s, where v_min is the minimum and
        v_max is the maximum radial velocity spanned by the arc.

    Generated by ChatGPT o3-mini-high on March 31 2025.
    """
    delta_phi_rad = np.deg2rad(delta_phi_deg)
    r_star = 0.42 * const.R_sun
    if torus_radius is None:
        torus_radius = 2.4 * r_star
    period = 3.93 * u.hour
    v_orb = (2 * np.pi * torus_radius / period).to(u.km / u.s)
    num_points = 100
    arc_angles = np.linspace(phi - delta_phi_rad / 2,
                             phi + delta_phi_rad / 2,
                             num_points)
    velocities = -v_orb.value * np.sin(arc_angles)
    v_min = np.min(velocities)
    v_max = np.max(velocities)
    return v_min, v_max


def compute_rv_range_over_phi(delta_phi_deg: float,
                              torus_radius: u.Quantity = None,
                              num_phi: int = 360) -> tuple:
    """Compute radial velocity ranges over a full orbit.

    This function computes the minimum and maximum radial velocities for
    an emitting arc with a given azimuthal extent, over central azimuthal
    angles spanning 0 to 2π. The orbit is assumed to be edge-on and
    circular.

    Args:
        delta_phi_deg (float): Azimuthal extent of the emitting arc in
            degrees.
        torus_radius (astropy.units.Quantity, optional): Radius of the
            torus. Defaults to 2.4 * (0.42 R_sun).
        num_phi (int, optional): Number of phi values to compute. Defaults
            to 360.

    Returns:
        tuple: (phi_vals, v_min_vals, v_max_vals) where phi_vals is an
        array of central azimuthal angles in radians, and v_min_vals and
        v_max_vals are arrays (in km/s) of the minimum and maximum radial
        velocities for each phi.

    Generated by ChatGPT o3-mini-high on March 31 2025.
    """
    phi_vals = np.linspace(0, 2 * np.pi, num_phi)
    v_min_vals = np.empty_like(phi_vals)
    v_max_vals = np.empty_like(phi_vals)
    for i, phi in enumerate(phi_vals):
        v_min, v_max = compute_rv_range(phi, delta_phi_deg, torus_radius)
        v_min_vals[i] = v_min
        v_max_vals[i] = v_max
    return phi_vals, v_min_vals, v_max_vals


if __name__ == '__main__':
    delta_phi_deg = 30.0
    phi_vals, v_min_vals, v_max_vals = compute_rv_range_over_phi(delta_phi_deg)
    v_range = v_max_vals - v_min_vals

    # Plot min and max radial velocities as a function of phi
    set_style("science")
    fig, ax = plt.subplots()
    ax.plot(np.rad2deg(phi_vals), v_min_vals, label='v_min (km/s)')
    ax.plot(np.rad2deg(phi_vals), v_max_vals, label='v_max (km/s)')
    ax.plot(np.rad2deg(phi_vals), v_range, label='v_range (km/s)',
            linestyle='--')
    ax.axhline(y=0, color='gray', linestyle=':')
    ax.set_xlabel('Central Arc Angle (deg)')
    ax.set_ylabel('Radial Velocity (km/s)')
    ax.set_title(f'Radial Velocity Range vs. Arc Phase (dφ={delta_phi_deg}°)')
    ax.legend()
    fig.tight_layout()
    fig.savefig('results/1d_2d_3d_velocity_models/1d_rv_range.png', dpi=300)
    plt.close(fig)