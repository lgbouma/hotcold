import numpy as np
import matplotlib.pyplot as plt
from astropy import units as u
from astropy import constants as const


def dividing_line_B_accretion(mdot: u.Quantity, R: u.Quantity, 
                              M: u.Quantity, P: u.Quantity) -> u.Quantity:
    """Compute the dividing magnetic field for the accretion regime.

    This function returns the magnetic field such that the
    Alfvén radius equals the corotation radius in the accretion
    regime, i.e., when
      (B^4 R^12/(G M mdot^2))^(1/7) = (G M P^2/(4π^2))^(1/3).

    Args:
        mdot (u.Quantity): Mass accretion rate (g/s).
        R (u.Quantity): Stellar radius (cm).
        M (u.Quantity): Stellar mass (g).
        P (u.Quantity): Rotation period (s).

    Returns:
        u.Quantity: Magnetic field (Gauss) dividing the two regimes.
    
    Generated by ChatGPT o3-mini-high on March 26 2025.
    """
    factor1 = ((const.G * M * mdot**2) / (R**12))**(1/4)
    factor2 = ((const.G * M * P**2) / (4 * np.pi**2))**(7/12)
    return factor1 * factor2


def dividing_line_B_wind(mdot: u.Quantity, R: u.Quantity, 
                         M: u.Quantity, P: u.Quantity, 
                         f: float) -> u.Quantity:
    """Compute the dividing magnetic field for the wind regime.

    This function returns the magnetic field such that the
    Alfvén radius equals the corotation radius in the wind
    regime, using the substitution
      v_inf = f * sqrt(2GM/R).
    The equality leads to
      B > [(mdot f)^(1/2) (G M)^(11/12) P^(4/3)] /
          [2^(13/12) π^(4/3) R^(13/4)].

    Args:
        mdot (u.Quantity): Mass loss rate (g/s).
        R (u.Quantity): Stellar radius (cm).
        M (u.Quantity): Stellar mass (g).
        P (u.Quantity): Rotation period (s).
        f (float): Factor for the terminal wind speed relative to the
                   escape speed.

    Returns:
        u.Quantity: Magnetic field (Gauss) dividing the two regimes.
    
    Generated by ChatGPT o3-mini-high on March 26 2025.
    """
    num = (mdot * f)**0.5 * (const.G * M)**(11/12) * P**(4/3)
    den = (2**(13/12) * np.pi**(4/3) * R**(13/4))
    return num / den


# Nominal parameters in CGS units.
R_nom = 0.4 * const.R_sun.cgs
M_nom = 0.2 * const.M_sun.cgs
P_obs = 2 * u.day

# Create an array of mdot values from 1e10 to 1e18 g/s.
mdot_vals = np.logspace(10, 18, 200) * u.g / u.s

# Compute the dividing lines.
B_accretion = dividing_line_B_accretion(mdot_vals, R_nom, M_nom, P_obs)
f_nom = 1.0  # nominal value for wind speed factor
B_wind = dividing_line_B_wind(mdot_vals, R_nom, M_nom, P_obs, f_nom)

# Convert the observational mdot constraint: 1e17 g/month.
# 1 month ~ 30 days, 1 day = 86400 s -> 30*86400 s.
mdot_min = 1e17 * u.g / (30 * 86400 * u.s)

fig, ax = plt.subplots(figsize=(8, 6))
ax.loglog(mdot_vals.value, B_accretion.value, lw=2, color='blue',
          label='Accretion regime (P = 2 days)')
ax.loglog(mdot_vals.value, B_wind.value, lw=2, color='red',
          label=f'Wind regime (P = 2 days, f = {f_nom})')

# Shade regions where R_A > R_co.
ax.fill_between(mdot_vals.value, B_accretion.value, 1e10, color='blue',
                alpha=0.2, label=r'Accretion: $R_A > R_{co}$')
ax.fill_between(mdot_vals.value, B_wind.value, 1e10, color='red',
                alpha=0.2, label=r'Wind: $R_A > R_{co}$')

# Add vertical line for mdot constraint.
ax.axvline(mdot_min.value, color='green', lw=2, ls='--',
           label=f'$\\dot{{M}} > {mdot_min.value:.2e}$ g/s')

ax.set_xlabel(r'Mass Accretion/Loss Rate $\dot{M}$ (g s$^{-1}$)')
ax.set_ylabel(r'Magnetic Field $B$ (G)')
ax.set_title('Dividing Lines in the $B$-$\\dot{M}$ Plane\n'
             'for P = 2 days, R = 0.4 $R_{\\odot}$, M = 0.2 $M_{\\odot}$')
ax.legend(loc='lower left')
ax.grid(True, which="both", ls="--", lw=0.5)

# Define conversion functions between g/s and M_sun/yr.
def gpers_to_msunperyear(x: float) -> float:
    """Convert mass accretion rate from g/s to M_sun/yr."""
    return (x * u.g / u.s).to(u.Msun / u.yr).value


def msunperyear_to_gpers(x: float) -> float:
    """Convert mass accretion rate from M_sun/yr to g/s."""
    return (x * u.Msun / u.yr).to(u.g / u.s).value


# Add a secondary x-axis at the top for Mdot in M_sun/yr.
secax = ax.secondary_xaxis("top",
                           functions=(gpers_to_msunperyear,
                                      msunperyear_to_gpers))
secax.set_xlabel(r'Mass Accretion/Loss Rate $\dot{M}$ ($M_{\odot}$/yr)')

fig.savefig('accretion_wind_regime_with_mdot_constraint_secondary.png', 
            dpi=300, bbox_inches='tight')
plt.close(fig)

