import numpy as np
from isochrones import get_ichrone

from astroquery.ipac.nexsci.nasa_exoplanet_archive import \
    NasaExoplanetArchive
from astropy.table import Table
import pandas as pd
import astropy.units as u
from astropy.constants import R_sun
import matplotlib.pyplot as plt


def fetch_m_dwarf_planets() -> Table:
    """Fetch PSCompPars for confirmed planets around M-dwarfs.

    Generated by ChatGPT o4-mini on April 26 2025.

    Returns:
        Table: PSCompPars rows with st_mass < 0.3 Msun.
    """
    table = NasaExoplanetArchive.query_criteria(
        table="pscomppars",
        select="pl_name, st_mass, st_rad, pl_orbsmax, pl_rade",
        where="st_mass < 0.3"
    )
    return table


def compute_a_rstar(df: pd.DataFrame) -> pd.DataFrame:
    """Compute a/Rstar and return sorted DataFrame.

    Generated by ChatGPT o4-mini on April 26 2025.

    Args:
        df: DataFrame with pl_orbsmax, st_rad.

    Returns:
        DataFrame with new column a_Rstar, sorted ascending.
    """
    df = df.dropna(subset=["pl_orbsmax", "st_rad", "pl_rade"])
    a = df["pl_orbsmax"].values * u.AU
    r = df["st_rad"].values * R_sun
    df["a_Rstar"] = (a / r).to_value(u.dimensionless_unscaled)
    return df.sort_values("a_Rstar").reset_index(drop=True)


def compute_pre_ms_radius(df: pd.DataFrame,
                          age_myr: float = 10.0) -> np.ndarray:
    """Estimate stellar radius at a given pre-main-sequence age.

    Generated by ChatGPT o4-mini-high on April 26 2025.

    Args:
        df: DataFrame with 'st_mass' in solar masses.
        age_myr: Age in Myr for pre-main-sequence evaluation.

    Returns:
        np.ndarray: Stellar radii in units of R_sun.
    """
    mist = get_ichrone('mist', tracks=True)
    log_age = np.log10(age_myr * 1e6)
    radii = []
    for mass in df['st_mass'].values:
        try:
            props = mist.generate(mass, log_age, 0.0, return_dict=True)
            rad = props['radius']
        except Exception:
            rad = np.nan
        radii.append(rad)
    return np.array(radii)


def compute_pre_ms_a_rstar(df: pd.DataFrame,
                           age_myr: float = 10.0) -> pd.DataFrame:
    """Compute a/Rstar at a given pre-main-sequence age.

    Generated by ChatGPT o4-mini-high on April 26 2025.

    Args:
        df: DataFrame with 'pl_orbsmax' and 'st_mass' columns.
        age_myr: Age in Myr for pre-main-sequence evaluation.

    Returns:
        pd.DataFrame: Input with new column 'a_Rstar_pre_ms', sorted
            ascending.
    """
    radii = compute_pre_ms_radius(df, age_myr)
    a = df['pl_orbsmax'].values * u.AU
    r = radii * R_sun
    df['st_rad_pms'] = radii
    df['a_Rstar_pre_ms'] = (a / r).to(u.dimensionless_unscaled).value
    return df


def plot_top_compact(df: pd.DataFrame,
                     when: str = "today",
                     top_n: int = 50,
                     ) -> None:
    """Plot the top N most compact systems and save figure.

    Generated by ChatGPT o4-mini on April 26 2025.

    Args:
        df: DataFrame with pl_name, a_Rstar, pl_rade.
        when: String indicating when to compute a/Rstar
            ("today" or "pre-ms").
        top_n: Number of systems to plot.
        filename: File path to save plot.
    """
    df = df.sort_values('a_Rstar').reset_index(drop=True)
    top = df.head(top_n)
    xkey = 'a_Rstar' if when == "today" else 'a_Rstar_pre_ms'
    filename = 'results/compact_systems_today.png' if when == "today" else 'results/compact_systems_pre_ms.png'

    fig, ax = plt.subplots(figsize=(6, 8))
    sizes = top["pl_rade"].values * 50
    scatter = ax.scatter(top[xkey].values,
                         top["pl_name"].values,
                         s=sizes,
                         c=top["st_mass"].values,
                         cmap="viridis",
                         vmin=0.1,
                         vmax=0.3)
    legend_radii = [1, 2, 4]
    legend_sizes = [r * 50 for r in legend_radii]
    legend_handles = [
        ax.scatter([], [], s=size, color="black")
        for size in legend_sizes
    ]
    legend_labels = [f"{r} RâŠ•" for r in legend_radii]
    ax.set_xlabel("a/Rstar (5 Myr)" if when == "pre-ms" else "a/Rstar (today)")
    ax.set_ylabel("Confirmed Planet")
    ax.set_xlim([0, 30])
    ylim = ax.get_ylim()
    ax.vlines([1, 2, 4], ymin=-1.5, ymax=top_n + 1.5,
              linestyles="dashed", colors="gray", lw=0.5, alpha=0.5, zorder=-1)
    ax.set_ylim(ylim)
    ax.legend(legend_handles,
              legend_labels,
              title="Planet Radius",
              scatterpoints=1,
              frameon=False,
              labelspacing=1,
              loc='lower right',)
    ax.set_title(
        f"Top {top_n} Most Compact Exoplanets around M-dwarfs "
        "(M* < 0.3 Msun)"
    )
    # Add colorbar for stellar mass
    fig.colorbar(scatter, ax=ax, label="Stellar Mass (Msun)")
    fig.tight_layout()
    fig.savefig(filename, dpi=300, bbox_inches="tight")


if __name__ == "__main__":
    tbl = fetch_m_dwarf_planets()
    df = tbl.to_pandas()
    df = compute_a_rstar(df)
    # Compute pre-MS a/Rstar at 10 Myr
    df = compute_pre_ms_a_rstar(df, age_myr=5.0)
    for when in ["today", "pre-ms"]:
        print(f"Plotting top compact systems {when}...")
        plot_top_compact(df, when=when, top_n=50)
