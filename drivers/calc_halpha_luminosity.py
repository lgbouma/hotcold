import numpy as np
import astropy.units as u
import astropy.constants as const
from astropy.modeling.physical_models import BlackBody


def bolometric_luminosity(T_eff: float, R_star: u.Quantity) -> u.Quantity:
    """Calculate bolometric luminosity from effective temperature and radius.

    The bolometric luminosity is computed using the Stefan-Boltzmann law:
    L = 4πR²σT⁴.
    Generated by ChatGPT o3-mini-high on March 18 2025.

    Args:
        T_eff (float): Effective temperature in Kelvin.
        R_star (u.Quantity): Stellar radius with appropriate units.

    Returns:
        u.Quantity: Bolometric luminosity in erg/s.
    """
    sigma = const.sigma_sb
    L = 4 * np.pi * (R_star**2) * sigma * (T_eff*u.K)**4
    return L.to(u.erg / u.s)


def halpha_luminosity(T_eff: float, R_star: u.Quantity,
                      equivalent_width: float = 5.0) -> u.Quantity:
    """Calculate Hα luminosity using the equivalent width of the line.

    The continuum flux density at the Hα wavelength is derived from a
    blackbody at T_eff using the BlackBody model. Note that BlackBody returns
    B_nu, the spectral radiance per unit frequency in units of
    erg/(s cm² sr Hz). We convert B_nu to B_lambda using:
    B_lambda = (c / λ²) * B_nu.
    The continuum flux is then F_cont = π * B_lambda, and the line flux is
    given by F_cont multiplied by the equivalent width (converted to cm).
    The Hα luminosity is computed as:
    L_Hα = 4πR² * (F_cont * EW).
    Generated by ChatGPT o3-mini-high on March 18 2025.

    Args:
        T_eff (float): Effective temperature in Kelvin.
        R_star (u.Quantity): Stellar radius with appropriate units.
        equivalent_width (float, optional): Equivalent width of the Hα line in
            Angstroms. Defaults to 5.0 Å.

    Returns:
        u.Quantity: Hα luminosity in erg/s.
    """
    wavelength = 6563 * u.AA
    # Convert wavelength to cm for unit consistency
    wavelength_cm = wavelength.to(u.cm)
    bb = BlackBody(temperature=T_eff * u.K, scale=1)
    # bb(wavelength_cm) returns B_nu in erg/(s cm² sr Hz)
    B_nu = bb(wavelength_cm)
    # Convert B_nu to B_lambda using: B_lambda = (c / λ²) * B_nu
    B_lambda = (const.c / wavelength_cm**2) * B_nu
    # Continuum flux density at the stellar surface
    F_cont = (np.pi*u.rad**2) * B_lambda
    # Convert equivalent width from Ångstrom to cm
    ew_cm = (equivalent_width * u.AA).to(u.cm)
    line_flux = F_cont * ew_cm
    L_halpha = 4 * np.pi * (R_star.to(u.cm)**2) * line_flux
    return L_halpha.to(u.erg / u.s)


def main() -> None:
    """Compute and print bolometric and Hα luminosities for a star.

    Generated by ChatGPT o3-mini-high on March 18 2025.
    """
    T_eff = 3000.0  # Kelvin
    R_star = 0.4 * const.R_sun
    L_bol = bolometric_luminosity(T_eff, R_star)
    print(f"Bolometric Luminosity (erg/s): {L_bol:.1e}")
    print(f"Bolometric Luminosity (Lsun): {L_bol.to(u.Lsun):.1e}")
    L_halpha = halpha_luminosity(T_eff, R_star, equivalent_width=5.0)
    print(f"Hα Luminosity (erg/s): {L_halpha:.1e}")
    print(f"Ratio: {L_halpha/L_bol:.2e}")


if __name__ == '__main__':
    main()

