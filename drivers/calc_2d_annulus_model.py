import numpy as np
import matplotlib.pyplot as plt
from astropy import constants as const
from astropy import units as u
from aesthetic.plot import set_style

def compute_blob_vrange_at_phi(phi: float, delta_phi_deg: float,
                               Delta_r: u.Quantity,
                               torus_radius: u.Quantity = None,
                               n_r: int = 100,
                               n_theta: int = 100) -> tuple:
    """Compute the velocity range for a blob segment of an annulus.

    The blob is defined by its central azimuth phi (radians), azimuthal
    extent delta_phi_deg (degrees), and radial width Delta_r. The torus is
    assumed to be centered at R0 = 2.4 * (0.42 R_sun) by default. The system
    rotates rigidly with period 3.93 hours, so that the orbital angular speed
    is Omega = 2π/P. A 2D polar grid in (r, theta) is constructed over the blob,
    and the observed radial velocity is calculated as:
        v_obs = - (Omega * r) * sin(theta)
    for an edge-on view. The overall velocity range is the difference between
    the maximum and minimum v_obs values over the grid.

    Generated by ChatGPT o3-mini-high on March 31 2025.

    Args:
        phi (float): Central azimuthal angle of the blob in radians.
        delta_phi_deg (float): Azimuthal extent of the blob in degrees.
        Delta_r (astropy.units.Quantity): Radial width of the blob.
        torus_radius (astropy.units.Quantity, optional): Central radius of the
            torus. Defaults to 2.4 * (0.42 R_sun).
        n_r (int, optional): Number of radial grid points. Defaults to 100.
        n_theta (int, optional): Number of azimuthal grid points.
            Defaults to 100.

    Returns:
        tuple: (v_min, v_max, v_range, v_obs_flat)
            v_min (float): Minimum radial velocity (km/s).
            v_max (float): Maximum radial velocity (km/s).
            v_range (float): Difference (v_max - v_min) in km/s.
            v_obs_flat (numpy.ndarray): Flattened array of v_obs values (km/s).
    """
    delta_phi_rad = np.deg2rad(delta_phi_deg)
    r_star = 0.42 * const.R_sun
    if torus_radius is None:
        torus_radius = 2.4 * r_star
    R0 = torus_radius
    r_min = (R0 - Delta_r / 2).to(u.m)
    r_max = (R0 + Delta_r / 2).to(u.m)
    r_vals = np.linspace(r_min.value, r_max.value, n_r) * u.m
    theta_min = phi - delta_phi_rad / 2
    theta_max = phi + delta_phi_rad / 2
    theta_vals = np.linspace(theta_min, theta_max, n_theta)
    r_grid, theta_grid = np.meshgrid(r_vals, theta_vals, indexing='ij')
    period = 3.93 * u.hour
    Omega = 2 * np.pi / period
    v_grid = (Omega * r_grid).to(u.km / u.s)
    v_obs = -v_grid.value * np.sin(theta_grid)
    v_min = np.min(v_obs)
    v_max = np.max(v_obs)
    v_range = v_max - v_min
    return v_min, v_max, v_range, v_obs.flatten()


def compute_blob_vrange_over_phi(delta_phi_deg: float, Delta_r: u.Quantity,
                                 torus_radius: u.Quantity = None,
                                 num_phi: int = 360, n_r: int = 100,
                                 n_theta: int = 100) -> tuple:
    """Compute the blob velocity ranges over a full orbit.

    This function computes the minimum, maximum, and overall velocity range
    (v_range = v_max - v_min) for a blob defined as a segment of an annulus, as
    a function of its central azimuthal angle phi spanning 0 to 2π. The blob
    is characterized by its azimuthal extent (delta_phi_deg) and radial width
    (Delta_r). The torus is assumed to be in rigid corotation with a period of
    3.93 hours and is centered at 2.4 * (0.42 R_sun) by default.

    Generated by ChatGPT o3-mini-high on March 31 2025.

    Args:
        delta_phi_deg (float): Azimuthal extent of the blob in degrees.
        Delta_r (astropy.units.Quantity): Radial width of the blob.
        torus_radius (astropy.units.Quantity, optional): Central radius of the
            torus. Defaults to 2.4 * (0.42 R_sun).
        num_phi (int, optional): Number of phi values spanning 0 to 2π.
            Defaults to 360.
        n_r (int, optional): Number of radial grid points. Defaults to 100.
        n_theta (int, optional): Number of azimuthal grid points.
            Defaults to 100.

    Returns:
        tuple: (phi_vals, v_min_vals, v_max_vals, v_range_vals)
            phi_vals (numpy.ndarray): Array of central azimuthal angles in radians.
            v_min_vals (numpy.ndarray): Array of minimum radial velocities (km/s).
            v_max_vals (numpy.ndarray): Array of maximum radial velocities (km/s).
            v_range_vals (numpy.ndarray): Array of velocity ranges (km/s).
    """
    phi_vals = np.linspace(0, 2 * np.pi, num_phi)
    v_min_vals = np.empty_like(phi_vals)
    v_max_vals = np.empty_like(phi_vals)
    v_range_vals = np.empty_like(phi_vals)
    for i, phi in enumerate(phi_vals):
        v_min, v_max, v_range, _ = compute_blob_vrange_at_phi(
            phi, delta_phi_deg, Delta_r, torus_radius, n_r, n_theta)
        v_min_vals[i] = v_min
        v_max_vals[i] = v_max
        v_range_vals[i] = v_range
    return phi_vals, v_min_vals, v_max_vals, v_range_vals


if __name__ == '__main__':
    delta_phi_deg = 10.0
    r_star = 0.42 * const.R_sun
    # For example, let Delta_r be 0.1 * R_star
    Delta_r = 0.2 * r_star
    torus_radius = 2.4 * r_star

    # Compute for an example central phi (e.g., phi = 0)
    phi_example = 0.0
    v_min, v_max, v_range, v_obs = compute_blob_vrange_at_phi(
        phi_example, delta_phi_deg, Delta_r, torus_radius,
        n_r=200, n_theta=200)

    # Plot the integrated line profile as a histogram.
    plt.figure()
    plt.hist(v_obs, bins=50, density=True, alpha=0.7, color='C0')
    plt.xlabel('Radial Velocity (km/s)')
    plt.ylabel('Normalized Count')
    plt.title('Integrated Line Profile for Blob at phi=0')
    plt.tight_layout()
    plt.savefig('blob_line_profile.png', dpi=300)
    plt.close()

    # Compute velocity ranges over a full orbit.
    phi_vals, v_min_vals, v_max_vals, v_range_vals = (
        compute_blob_vrange_over_phi(delta_phi_deg, Delta_r, torus_radius,
                                     num_phi=360, n_r=100, n_theta=100)
    )

    # Plot v_min, v_max, and v_range as functions of phi.
    set_style("science")
    fig, ax = plt.subplots()
    ax.plot(np.rad2deg(phi_vals), v_min_vals, label='v_min (km/s)')
    ax.plot(np.rad2deg(phi_vals), v_max_vals, label='v_max (km/s)')
    ax.plot(np.rad2deg(phi_vals), v_range_vals, label='v_range (km/s)',
            linestyle='--')
    ax.set_xlabel('Central Blob Angle (deg)')
    ax.set_ylabel('Radial Velocity (km/s)')
    ax.set_title(f'Blob Velocity Range vs. Central Phase (dφ={delta_phi_deg}°, dr={Delta_r/r_star:.1f}R*)')
    ax.legend()
    fig.tight_layout()
    fig.savefig('results/1d_2d_3d_velocity_models/blob_vrange_vs_phi.png', dpi=300)
    plt.close(fig)
